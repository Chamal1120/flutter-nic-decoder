name: CI/CD
on:
  push:
    tags:
      - 'v*'
permissions:
  contents: write
  discussions: write
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.27.0
      - name: Install dependencies
        run: flutter pub get
      - name: Run tests
        id: test_step
        run: |
          if flutter test; then
            echo "TEST_STATUS=Passing" >> $GITHUB_ENV
            echo "BADGE_COLOR=green" >> $GITHUB_ENV
          else
            echo "TEST_STATUS=Failing" >> $GITHUB_ENV
            echo "BADGE_COLOR=red" >> $GITHUB_ENV
            exit 1
          fi
      - name: Generate Badge
        if: success()
        run: |
          BADGE_URL="https://img.shields.io/badge/Tests-${{ env.TEST_STATUS }}-${{ env.BADGE_COLOR }}?style=for-the-badge&logo=testcafe"
          curl -o test-status.svg "$BADGE_URL"
      - name: Commit and Push Badge
        if: success()
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          mv test-status.svg .github/assets/test-status.svg
          git add .github/assets/test-status.svg
          git commit -m "ci/cd: Update test status badge"
          git push origin main
  build:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.27.0
      - name: Install dependencies
        run: flutter pub get
      - name: Build APK
        id: build_step
        run: |
          if flutter build apk --release; then
            echo "BUILD_STATUS=Passing" >> $GITHUB_ENV
            echo "BADGE_COLOR=green" >> $GITHUB_ENV
          else
            echo "BUILD_STATUS=Failing" >> $GITHUB_ENV
            echo "BADGE_COLOR=red" >> $GITHUB_ENV
            exit 1
          fi
      - name: Rename APK with version
        run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/nic-app-${{ github.ref_name }}.apk
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: build/app/outputs/flutter-apk/nic-app-${{ github.ref_name }}.apk
      - name: Generate Build Badge
        if: success()
        run: |
          BADGE_URL="https://img.shields.io/badge/Builds-${{ env.BUILD_STATUS }}-${{ env.BADGE_COLOR }}?style=for-the-badge&logo=androidstudio"
          curl -o build-status.svg "$BADGE_URL"
      - name: Commit and Push Build Badge
        if: success()
        run: |
          git pull
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          mv build-status.svg .github/assets/build-status.svg
          git add .github/assets/build-status.svg
          git commit -m "ci/cd: Update build status badge"
          git push origin main
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: release-assets/
      - name: Generate Release Notes
        run: |
          # Get previous tag
          PREV_TAG=$(git tag --sort=-v:refname | sed -n 2p)
          CURR_TAG=${{ github.ref_name }}
          RELEASE_NOTES="release-assets/release-notes.md"

          echo "# What's new?" > $RELEASE_NOTES

          # Get commits between tags
          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log --pretty=format:"%s" $PREV_TAG..$CURR_TAG)
          fi

          FEATURES=$(echo "$COMMITS" | grep -iE "^feat: " | sed 's/^feat: //')
          FIXES=$(echo "$COMMITS" | grep -iE "^fix: " | sed 's/^fix: //')

          # Add features and fixes to release notes
          if [ -n "$FEATURES" ]; then
            echo -e "\n## Features" >> $RELEASE_NOTES
            echo "$FEATURES" | while read -r line; do echo "- $line"; done >> $RELEASE_NOTES
          fi

          if [ -n "$FIXES" ]; then
            echo -e "\n## Fixes" >> $RELEASE_NOTES
            echo "$FIXES" | while read -r line; do echo "- $line"; done >> $RELEASE_NOTES
          fi
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body_path: release-assets/release-notes.md
          files: release-assets/nic-app-${{ github.ref_name }}.apk
      - name: Update CHANGELOG.md
        run: |
          CHANGELOG_FILE="CHANGELOG.md"
          RELEASE_NOTES="release-assets/release-notes.md"
          TEMP_FILE="CHANGELOG_TEMP.md"

          # Create Changelog.md if it doesn't exist
          if [ ! -f "$CHANGELOG_FILE" ]; then
            touch "$CHANGELOG_FILE"
          fi

          # Prepend new release notes
          {
            echo "## ${{ github.ref_name }}"
            cat "$RELEASE_NOTES"
            echo ""
            cat "$CHANGELOG_FILE"
          } > "$TEMP_FILE"

          mv "$TEMP_FILE" "$CHANGELOG_FILE"
      - name: Commit and push updated CHANGELOG.md
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: Update CHANGELOG for ${{ github.ref_name }}"
          git push origin main
