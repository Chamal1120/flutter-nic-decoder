name: Flutter Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build Flutter APK
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.27.0

      - name: Check Flutter and Dart versions
        run: |
          flutter --version
          dart --version

      - name: Install dependencies
        run: flutter pub get        

      - name: Build APK
        run: flutter build apk --release

      - name: Rename APK with version
        run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/nic-app-${{ github.ref_name }}.apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: build/app/outputs/flutter-apk/nic-app-${{ github.ref_name }}.apk

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: release-assets/

      - name: Generate Changelog for current tag
        run: |

           # Define the current tag
          NEW_TAG=${{ github.ref_name }}

          # Fetch all tags and sort them
          ALL_TAGS=$(git tag -l | sort -V)

          # Find the index of the current tag in the sorted list
          INDEX=$(echo "$ALL_TAGS" | grep -n "^$NEW_TAG$" | cut -d: -f1)

          # Get the previous tag by picking the tag just before the current tag
          PREVIOUS_TAG=$(echo "$ALL_TAGS" | sed -n "$((INDEX-1))p")

          # Output the tags for debugging
          echo "All tags: $ALL_TAGS"
          echo "Previous tag: $PREVIOUS_TAG"
          echo "New tag: $NEW_TAG"

          # Set the path for the changelog file
          CHANGELOG_PATH="CHANGELOG.md"
          
          # Prepare the temporary changelog file for the release
          echo "# What's Changed" > release-assets/CHANGELOG.md

          # Extract the commits related to the current tag
          echo "## New features 🚀" >> release-assets/CHANGELOG.md
          git log --pretty=format:"- %s" --no-merges --grep="^feat:" "$PREVIOUS_TAG".."$NEW_TAG" >> release-assets/CHANGELOG.md
          
          echo "## Bug fixes 🐛" >> release-assets/CHANGELOG.md
          git log --pretty=format:"- %s" --no-merges --grep="^fix:" "$PREVIOUS_TAG".."$NEW_TAG" >> release-assets/CHANGELOG.md

          # Check if the generated changelog content is correct
          echo "Generated changelog for ${NEW_TAG}:"
          cat release-assets/CHANGELOG.md

          # Append the changes to the root CHANGELOG.md
          echo "## [${NEW_TAG}] - $(date +'%Y-%m-%d')" >> $CHANGELOG_PATH
          cat release-assets/CHANGELOG.md >> $CHANGELOG_PATH
          echo "" >> $CHANGELOG_PATH


      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release-assets/CHANGELOG.md
          files: |
            release-assets/nic-app-${{ github.ref_name }}.apk
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_NIC_DEC }}

